WEEK 05

Lecture 02 - Simple Aggregation Example

			PRODUCTS

NAME | CATEGORY | MANUFACTURER | PRICE
--------------------------------------
ipad | 	tablet	|	apple	   | 499
nexus| cellphone|	samsung	   | 350

SQL:

	SELECT manufacturer, COUNT(*) FROM PRODUCTS GROUP BY manufecturer;

MONGODB:

	db.products.aggregate([
		{$group:
			{
				_id:"$manufacturer",
				num_products:{$sum:1}
			}
		}
	]);

-----------------------------------------------------------------------------------

Lecture 03 - The Aggregation Pipeline

Stages in the aggregation pipeline:

Match
Group
Skip
Limit
Sort
Project
Unwind

-----------------------------------------------------------------------------------

Lecture 04 - Simple Example Expanded

QUIZ:  If you have the following collection of stuff:

	> db.stuff.find()
		{ "_id" : ObjectId("50b26f9d80a78af03b5163c8"), "a" : 1, "b" : 1, "c" : 1 }
		{ "_id" : ObjectId("50b26fb480a78af03b5163c9"), "a" : 2, "b" : 2, "c" : 1 }
		{ "_id" : ObjectId("50b26fbf80a78af03b5163ca"), "a" : 3, "b" : 3, "c" : 1 }
		{ "_id" : ObjectId("50b26fcd80a78af03b5163cb"), "a" : 3, "b" : 3, "c" : 2 }
		{ "_id" : ObjectId("50b26fd380a78af03b5163cc"), "a" : 3, "b" : 5, "c" : 3 }

and you perform the following aggregation:
	> db.stuff.aggregate([{$group:{_id:'$c'}}]);

How many documents will be in the result set from aggregate?

1
2
3 √ - pq os 3 primeiros registro (1) estaram no mesmo grupo
4
5

-----------------------------------------------------------------------------------

Lecture 05 - Compound Groupings

SQL:
	SELECT manufacturer, category, COUNT(*) FROM PRODUCTS GROUP BY manufacturer, category;

MONGODB:	
	db.products.aggregate([
		{$group:
			{
				_id:{
					"manufacturer":"$manufacturer", 
					"category":"$category"
				num_products:{$sum:1}
			}
		}
	]);

QUIZ: Given the following collection:
	> db.stuff.find()
		{ "_id" : ObjectId("50b26f9d80a78af03b5163c8"), "a" : 1, "b" : 1, "c" : 1 }
		{ "_id" : ObjectId("50b26fb480a78af03b5163c9"), "a" : 2, "b" : 2, "c" : 1 }
		{ "_id" : ObjectId("50b26fbf80a78af03b5163ca"), "a" : 3, "b" : 3, "c" : 1 }
		{ "_id" : ObjectId("50b26fcd80a78af03b5163cb"), "a" : 3, "b" : 3, "c" : 2 }
		{ "_id" : ObjectId("50b26fd380a78af03b5163cc"), "a" : 3, "b" : 5, "c" : 3 }
		{ "_id" : ObjectId("50b27f7080a78af03b5163cd"), "a" : 3, "b" : 3, "c" : 2 }

And the following aggregation query:
	> db.stuff.aggregate([{$group:
		{_id:
			{'moe':'$a', 
				'larry':'$b',
				'curly':'$c'
			}
		}
	}])

How many documents will be in the result set?

2
3
4
5 √ - O quinto registro será agrupado na qtdade de 2
6

-----------------------------------------------------------------------------------

Lecture 06 - Using a document for _id

ID pode ser composto, UNIQUE - db.collection.insert({_id:{name:"Laisson",class:"m101"}, hometown:"SC"});
error se add outro registro como mesmo ID

-----------------------------------------------------------------------------------

Lecture 07 - Aggregation Expressions

$group
	- $sum: soma dos valores de uma chave me todos os documentos
	- $avg: média dos valores de uma chave me todos os documentos
	- $min: encontrar o valor mínimo de uma determinada chave
	- $max: encontrar o valor máximo de uma determinada chave
	 		|$push: adiciona valor ao array
	--array-|
	 		|$addToSet: adiciona se não existir
$sort
	- $first
	- $last

Lecture 08 - $sum

	Ex: db.products.aggregate([
			{ $group:{
					_id: {
							"maker":"$manufacturer"
						},
					sum_prices:{
							$sum:"$price"
						}
				}
			}
		])

	QUIZ: 
		Write an aggregation query to sum up the population (pop) by state and put the result in a field called population. Don't use a compound _id key (you don't need one and the quiz checker is not expecting one). The collection name is zips. so something along the lines of db.zips.aggregate...

		R: db.zips.aggregate([{$group:{'_id':'$state', population:{'$sum':'$pop'}}}]);

Lecture 09 - $avg

	Ex: db.products.aggregate([
			{ $group:{
					_id: {
							"category":"$category"
						},
					avg_price:{
							$avg:"$price"
						}
				}
			}
		])
